#nperumals/github-cicd-mini
# Packaging
# PR --> Packaging Artifacts & Publish to Scaleway Container Registry

# Deploy to Production
name: ci

on:
  push:
    branches:
      - "main"
#    tags:
#      - "test1_staging_front*"
#  pull_request:
#    branches:
#      - "main"

jobs:
  docker:
    runs-on: ubuntu-latest
    env:  
      DOCKER_REGISTRY_NAMESPACE: nperumals
    steps:
      - 
        name: Prepare build ids
        id: prep
        run: |
          # Set environment for branch
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
             ENV1="production"
          else
             ENV1=${GITHUB_REF##*/}
          fi  
          echo $ENV1        
          BRANCH=${GITHUB_REF##*/}
          TS=$(date +%s)
          REVISION=${GITHUB_SHA::8}
          IMAGE_NAME="test1_${BRANCH}-front"
          BUILD_DATE="$(date -u +'%Y%m%dT%H%M%SZ')"
          BUILD_ID="$DOCKER_REGISTRY_NAMESPACE/${IMAGE_NAME}:${BUILD_DATE}-${REVISION}"
          LATEST_ID="$DOCKER_REGISTRY_NAMESPACE/${IMAGE_NAME}:latest"
          echo "BRANCH=${BRANCH}" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=${BUILD_DATE}" >> $GITHUB_OUTPUT
          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_OUTPUT
          echo "LATEST_ID=${LATEST_ID}" >> $GITHUB_OUTPUT          
      -
        name: Login to Docker registry
        run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login $DOCKER_REG_NAMESPACE -u secrets.DOCKERHUB_USERNAME

#        echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login $DOCKER_REG_NAMESPACE -u secrets.DOCKERHUB_USERNAME password secrets.DOCKERHUB_TOKEN
#        --password-stdin
      -
#        name: Querying for Latest Docker Image
#        run: |
        
#          IMAGE_JSON=$(curl -X GET --header "x-auth-token: $SCW_REGISTRY_PASSWORD"  '$DOCKER_REG_API?name=$DOCKER_APP_NAME&namespace_id=$DOCKER_REG_NAMESPACE_ID&project_id=$SCW_PROJECT_ID)
#          IMAGE_ID=$IMAGE_JSON | grep -o '"id":"[^"]*' | grep -o '[^"]*$' 
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}

#        name: Tag and push Docker Image
#        run: |
           
#          docker tag  $IMAGE_ID  DOCKER_REG_NAMESPACE/${{#steps.prep.outputs.BUILD_ID }}
#          docker push $IMAGE_ID  DOCKER_REG_NAMESPACE/${{ steps.prep.outputs.BUILD_ID }}

    
#      -
#        name: Checkout
#        uses: actions/checkout@v3
#      -
#        name: Docker meta
#        id: meta
#        uses: docker/metadata-action@v4
#        with:
#          # list of Docker images to use as base name for tags
#          images: |
#            name/app
#            ghcr.io/username/app
#          # generate Docker tags based on the following events/attributes
#          tags: |
#            type=schedule
#            type=ref,event=branch
#            type=ref,event=pr
#            type=semver,pattern={{version}}
#            type=semver,pattern={{major}}.{{minor}}
#            type=semver,pattern={{major}}
#            type=sha
#      -
#        name: Set up QEMU
#        uses: docker/setup-qemu-action@v2
#      -
#        name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#      -
#        name: Login to Docker Hub
#        if: github.event_name != 'pull_request'
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#      -
#        name: Login to GHCR
#        if: github.event_name != 'pull_request'
#        uses: docker/login-action@v2
#        with:
#          registry: ghcr.io
#          username: ${{ github.repository_owner }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#      -
#        name: Build and push
#        uses: docker/build-push-action@v3
#        with:
#          context: .
#          push: ${{ github.event_name != 'pull_request' }}
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
          
#        name: Querying for Latest Docker Image
#        run: |
#          IMAGE_JSON=$(curl -X GET --header "x-auth-token: $SCW_REGISTRY_PASSWORD"  '$DOCKER_REG_API?name=$DOCKER_APP_NAME&namespace_id=$DOCKER_REG_NAMESPACE_ID&project_id=$SCW_PROJECT_ID)
#          IMAGE_ID=$IMAGE_JSON | grep -o '"id":"[^"]*' | grep -o '[^"]*$' 

      -
        name: Tag and push Docker Image
        run: |
          IMAGE_ID=20230112T062842Z-1266f255
          docker tag  $IMAGE_ID  $DOCKER_REG_NAMESPACE/${{ steps.prep.outputs.BUILD_ID }}
          docker push $IMAGE_ID  $DOCKER_REG_NAMESPACE/${{ steps.prep.outputs.BUILD_ID }}

          docker tag  $IMAGE_ID  $DOCKER_REG_NAMESPACE/${{ steps.prep.outputs.BUILD_ID }}
          docker push $IMAGE_ID  $DOCKER_REG_NAMESPACE/${{ steps.prep.outputs.BUILD_ID }}

      - name: Logout of Docker registry
        if: always()
        run: docker logout $DOCKER_REGISTRY_NAMESPACE
